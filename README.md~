# Cordova Background Location Service

Desenvolvido a partir da contribuição de Mark Taylor - Red-Folder https://github.com/Red-Folder/bgs-sample. Agradecemos, nos ajudou muito e da mesma forma deixamos livre para uso de acordo com a licença MIT.

## Breve resumo
Este repositório fornece um serviço de Background construída sobre a funcionalidade do núcleo para o Plugin de Serviço background para o Cordova (bgs-core) . 

* [Background Service Plugin Core (bgs-core)] (https://github.com/Red-Folder/bgs-core)

## Plataforma Suportada

- Android

## O que faz

- Captura a partir do GPS a Latitude e Longitude do dispositivo e retorna através de uma interface Cordova




## Installation
   cordova plugin add https://github.com/appssimetria/cordovabacklocationservice
	

### Exemplo
	
	    var myService;

            document.addEventListener('deviceready', function () {
                myService = cordova.plugins.cordovaBackLocationService;
                getStatus();
            }, true);

            function handleSuccess(data) {
                updateView(data);
            }

            function handleError(data) {
                alert("Error: " + data.ErrorMessage);
                alert(JSON.stringify(data));
                updateView(data);
            }

            /*
             * Button Handlers
             */
            function getStatus() {
                myService.getStatus(function (r) {
                    handleSuccess(r)
                },
                        function (e) {
                            handleError(e)
                        });
            }
            ;

            function startService() {
                myService.startService(function (r) {
                    handleSuccess(r)
                },
                        function (e) {
                            handleError(e)
                        });
            }

            function stopService() {
                myService.stopService(function (r) {
                    handleSuccess(r)
                },
                        function (e) {
                            handleError(e)
                        });
            }

            function enableTimer() {
                myService.enableTimer(10000,
                        function (r) {
                            handleSuccess(r)
                        },
                        function (e) {
                            handleError(e)
                        });
            }

            function disableTimer() {
                myService.disableTimer(function (r) {
                    handleSuccess(r)
                },
                        function (e) {
                            handleError(e)
                        });
            }
            ;

            function registerForBootStart() {
                myService.registerForBootStart(function (r) {
                    handleSuccess(r)
                },
                        function (e) {
                            handleError(e)
                        });
            }

            function deregisterForBootStart() {
                myService.deregisterForBootStart(function (r) {
                    handleSuccess(r)
                },
                        function (e) {
                            handleError(e)
                        });
            }

            function registerForUpdates() {
                myService.registerForUpdates(function (r) {
                    handleSuccess(r)
                },
                        function (e) {
                            handleError(e)
                        });
            }

            function deregisterForUpdates() {
                myService.deregisterForUpdates(function (r) {
                    handleSuccess(r)
                },
                        function (e) {
                            handleError(e)
                        });
            }

            function setConfig() {
                var helloToTxt = document.getElementById("helloToTxt");
                var helloToString = helloToTxt.value;
                var config = {
                    "HelloTo": helloToString
                };
                myService.setConfiguration(config,
                        function (r) {
                            handleSuccess(r)
                        },
                        function (e) {
                            handleError(e)
                        });
            }

            /*
             * View logic
             */
            function updateView(data) {
                var serviceBtn = document.getElementById("toggleService");
                var timerBtn = document.getElementById("toggleTimer");
                var bootBtn = document.getElementById("toggleBoot");
                var listenBtn = document.getElementById("toggleListen");
                var updateBtn = document.getElementById("updateBtn");
                var refreshBtn = document.getElementById("refreshBtn");

                var serviceStatus = document.getElementById("serviceStatus");
                var timerStatus = document.getElementById("timerStatus");
                var bootStatus = document.getElementById("bootStatus");
                var listenStatus = document.getElementById("listenStatus");

                serviceBtn.disabled = false;
                if (data.ServiceRunning) {
                    serviceStatus.innerHTML = "Running";
                    serviceBtn.onclick = stopService;
                    timerBtn.disabled = false;
                    if (data.TimerEnabled) {
                        timerStatus.innerHTML = "Enabled";
                        timerBtn.onclick = disableTimer;
                    } else {
                        timerStatus.innerHTML = "Disabled";
                        timerBtn.onclick = enableTimer;
                    }

                    updateBtn.disabled = false;
                    updateBtn.onclick = setConfig;

                    refreshBtn.disabled = false;
                    refreshBtn.onclick = getStatus;

                } else {
                    serviceStatus.innerHTML = "Not running";
                    serviceBtn.onclick = startService;
                    timerBtn.disabled = true;
                    timerEnabled = false;

                    updateBtn.disabled = true;
                    refreshBtn.disabled = true;
                }

                bootBtn.disabled = false;
                if (data.RegisteredForBootStart) {
                    bootStatus.innerHTML = "Registered";
                    bootBtn.onclick = deregisterForBootStart;
                } else {
                    bootStatus.innerHTML = "Not registered";
                    bootBtn.onclick = registerForBootStart;
                }

                listenBtn.disabled = false;
                if (data.RegisteredForUpdates) {
                    listenStatus.innerHTML = "Registered";
                    listenBtn.onclick = deregisterForUpdates;
                } else {
                    listenStatus.innerHTML = "Not registered";
                    listenBtn.onclick = registerForUpdates;
                }

                if (data.Configuration != null)
                {
                    try {
                        var helloToTxt = document.getElementById("helloToTxt");
                        helloToTxt.value = data.Configuration.HelloTo;
                    } catch (err) {
                    }
                }

                if (data.LatestResult != null)
                {
                    try {
                        var resultMessage = document.getElementById("resultMessage");
                        var resultMessageLatitude = document.getElementById("resultMessageLatitude");
                        resultMessage.innerHTML = data.LatestResult.Latitude;
                        resultMessageLatitude.innerHTML = data.LatestResult.Longitude;


                    } catch (err) {
                    }
                }
            }
	


## Licença
Copyright (c) 2015 appssimetria
    
Licensed under the Apache License, Version 2.0 (the "License");   
you may not use this file except in compliance with the License.   
You may obtain a copy of the License at       
 
http://www.apache.org/licenses/LICENSE-2.0   
 
Unless required by applicable law or agreed to in writing, software   
distributed under the License is distributed on an "AS IS" BASIS,   
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   
See the License for the specific language governing permissions and   
limitations under the License.





